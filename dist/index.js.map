{"version":3,"sources":["../src/index.js"],"names":["PORT","app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","wss","Server","clients","on","connection","userId","length","newClient","ws","push","console","log","message","filter","client","get","req","res","version","next","people","setInterval","forEach","msg","send","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAIA,IAAMA,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;AACAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAJ,IAAII,GAAJ,CAAQ,oBAAK;AACTC,iBAAgB;AADP,CAAL,CAAR;AAGAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACpBC,QAAO;AADa,CAAhB,CAAR;AAGAR,IAAIS,GAAJ,GAAU,IAAIC,WAAJ,CAAW;AACpBT,SAAQD,IAAIC;AADQ,CAAX,CAAV;AAGA,IAAIU,UAAU,EAAd;AACAX,IAAIS,GAAJ,CAAQG,EAAR,CAAW,YAAX,EAAyB,UAACC,UAAD,EAAgB;AACxC,KAAMC,SAASH,QAAQI,MAAR,GAAiB,CAAhC;AACAF,YAAWC,MAAX,GAAoBA,MAApB;AACA,KAAME,YAAY;AACjBC,MAAIJ,UADa;AAEjBC,UAAQA;AAFS,EAAlB;AAIAH,SAAQO,IAAR,CAAaF,SAAb;AACAG,SAAQC,GAAR,CAAY,mCAAZ,EAAiDN,MAAjD;AACAD,YAAWD,EAAX,CAAc,SAAd,EAAyB,UAACS,OAAD,EAAa;AACrCF,UAAQC,GAAR,CAAY,eAAZ,EAA6BC,OAA7B;AACA,EAFD;AAGAR,YAAWD,EAAX,CAAc,OAAd,EAAuB,YAAM;AAC5BO,UAAQC,GAAR,CAAY,iBAAZ,EAA+BN,MAA/B,EAAuC,kBAAvC;AACAH,YAAUA,QAAQW,MAAR,CAAe,UAACC,MAAD;AAAA,UAAYA,OAAOT,MAAP,KAAkBA,MAA9B;AAAA,GAAf,CAAV;AACA,EAHD;AAIA,CAhBD;AAiBAd,IAAIwB,GAAJ,CAAQ,GAAR,EAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,KAAInB,IAAJ,CAAS;AACRoB,WAAUA;AADF,EAAT;AAGA,CAJD;AAKA3B,IAAIwB,GAAJ,CAAQ,sBAAR,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;AACnD,QAAOF,IAAInB,IAAJ,CAAS;AACfsB,UAAQlB;AADO,EAAT,CAAP;AAGA,CAJD;AAKAmB,YAAY,YAAM;AACjB;AACAX,SAAQC,GAAR,YAAqBT,QAAQI,MAA7B;AACA,KAAGJ,QAAQI,MAAR,GAAkB,CAArB,EAAuB;AACtBJ,UAAQoB,OAAR,CAAgB,UAACR,MAAD,EAAY;AAC3B;AACA,OAAMS,mBAAiBT,OAAOT,MAAxB,wCAAN;AACAS,UAAON,EAAP,CAAUgB,IAAV,CAAeD,GAAf;AACA,GAJD;AAKA;AACD,CAVD,EAUG,IAVH;AAWAhC,IAAIC,MAAJ,CAAWiC,MAAX,CAAkBC,QAAQC,GAAR,CAAYrC,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC1CoB,SAAQC,GAAR,6BAAsCpB,IAAIC,MAAJ,CAAWoC,OAAX,GAAqBC,IAA3D;AACP,CAFD;kBAGetC,G","file":"index.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport {version} from '../package.json'\r\nimport WebSocketServer, {Server} from 'uws';\r\n\r\n\r\n\r\nconst PORT = 3000;\r\nconst app = express();\r\napp.server = http.createServer(app)\r\napp.use(morgan('dev'));\r\napp.use(cors({\r\n    exposedHeaders: \"*\"\r\n}));\r\napp.use(bodyParser.json({\r\n    limit: '50mb'\r\n}));\r\napp.wss = new Server({\r\n\tserver: app.server\r\n});\r\nlet clients = [];\r\napp.wss.on('connection', (connection) => {\r\n\tconst userId = clients.length + 1;\r\n\tconnection.userId = userId;\r\n\tconst newClient = {\r\n\t\tws: connection,\r\n\t\tuserId: userId,\r\n\t};\r\n\tclients.push(newClient);\r\n\tconsole.log(\"New client connected with userId:\", userId);\r\n\tconnection.on('message', (message) => {\r\n\t\tconsole.log(\"message from:\", message);\r\n\t});\r\n\tconnection.on('close', () => {\r\n\t\tconsole.log(\"client with ID \", userId, ' is disconnected');\r\n\t\tclients = clients.filter((client) => client.userId !== userId);\r\n\t});\r\n});\r\napp.get('/',(req, res) => {\r\n\tres.json({\r\n\t\tversion:  version\r\n\t});\r\n});\r\napp.get('/api/all_connections', (req, res, next) => {\r\n\treturn res.json({\r\n\t\tpeople: clients,\r\n\t});\r\n});\r\nsetInterval(() => {\r\n\t// each 3 seconds this function will be executed.\r\n\tconsole.log(`There ${clients.length} people in the connection.`);\r\n\tif(clients.length  > 0){\r\n\t\tclients.forEach((client) => {\r\n\t\t\t//console.log(\"CLient ID\", client.userId);\r\n\t\t\tconst msg = `Hey ID: ${client.userId}: you got a new message from server`;\r\n\t\t\tclient.ws.send(msg);\r\n\t\t});\r\n\t}\r\n}, 3000)\r\napp.server.listen(process.env.PORT || PORT, () => {\r\n        console.log(`App is running on port ${app.server.address().port}`);\r\n});\r\nexport default app;"]}